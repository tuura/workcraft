pluginManagement {
    plugins {
        id 'org.jetbrains.kotlin.jvm' version '1.4.0'
        id 'ca.coglinc.javacc' version '2.4.0'
        id 'com.github.kt3k.coveralls' version '2.10.2'
        id 'de.aaschmid.cpd' version '3.1'
        id 'com.github.jk1.dependency-license-report' version '1.14'
    }
}


/*
 * Versions of languages and tools
 */

// Java version for source code and target bytecode compatibility
gradle.ext.javaVersion = '1.8'

// Code quality and coverage tools (Checkstyle, PMD, Jacoco)
gradle.ext.checkstyleVersion = '8.35'
gradle.ext.pmdVersion = '6.26.0'
gradle.ext.jacocoVersion = '0.8.5'


/*
 * Compile-time dependencies for all subprojects
 */

// Unit testing
gradle.ext.junit = 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

// JavaCC parser generator
gradle.ext.javacc = 'net.java.dev.javacc:javacc:7.0.9'
gradle.ext.javaccExclude = '**/jj/**'


/*
 * Root project and subprojects
 */

// Root project
rootProject.name = 'workcraft'
gradle.ext.libDir = 'lib'

// Include subprojects, set their directories, and define coverage
gradle.ext.coverageProjects = []
rootDir.eachDirMatch(~/workcraft.*/) {
    file(it).eachDir {
        if (file(it.path + '/build.gradle').exists()) {
            def project1 = findProject(':' + it.name)
            if (project1 != null) {
                throw new GradleException('Project ' + it.name + ' already exists!\n' +
                    'Old path: ' + it + '\n' +
                    'New path: ' + project1.projectDir)
            }
            include it.name
            project(":" + it.name).projectDir = it
            if (file(it.path + '/test-src/').exists()) {
                gradle.coverageProjects.add(it.name)
            }
        }
    }
}
