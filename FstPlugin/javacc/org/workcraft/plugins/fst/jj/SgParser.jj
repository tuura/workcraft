/**
 * JavaCC file
 */
options
{
    JDK_VERSION = "1.8";
    LOOKAHEAD= 1;
    STATIC = false;
    DEBUG_PARSER = true;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(SgParser)
package org.workcraft.plugins.fst.jj;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;
import org.workcraft.dom.Node;
import org.workcraft.plugins.fsm.Event;
import org.workcraft.plugins.fsm.State;
import org.workcraft.plugins.fst.Fst;
import org.workcraft.plugins.fst.Signal;
import org.workcraft.plugins.fst.Signal.Type;
import org.workcraft.plugins.fst.SignalEvent;
import org.workcraft.plugins.fst.SignalEvent.Direction;
import org.workcraft.util.EnumUtils;
import org.workcraft.util.LogUtils;
import org.workcraft.util.Pair;
import org.workcraft.exceptions.FormatException;

public class SgParser
{
    private HashMap<String, Type> signals;
    private HashSet<String> dummies;
    private Fst fst;

    private void init() {
        signals = new HashMap<String, Type>();
        dummies = new HashSet<String>();
        fst = new Fst();
    }

    private void addSignals(List<String> list, Type type) {
        for (String name : list) {
            if (signals.containsKey(name)) {
                Type oldType = signals.get(name);
                if (!oldType.equals(type)) {
                    throw new FormatException("The " + type + " signal '" + name
                        + "' was already listed as an " + oldType + " signal.");
                }
            } else {
                signals.put(name, type);
            }
        }
    }
}

PARSER_END(SgParser)

<*>
SKIP :
{
    " "
|
    "\t"
}

<IGNORE_LINE>
TOKEN :
{
    <REST: (~["\r", "\n", "#"])*> : DEFAULT
}

<IGNORE_ALL>
TOKEN :
{
    <ANY: ~[]>
}

TOKEN :
{
    <COMMENT : "#" (~["\r", "\n"])*>
|
    <LINEBREAK : ((<COMMENT>)? ["\r", "\n"])+>
|
    <MODEL_NAME : ".model" | ".name">
|
    <INPUT_HEADER : ".inputs">
|
    <OUTPUT_HEADER : ".outputs">
|
    <INTERNAL_HEADER : ".internal">
|
    <DUMMY_HEADER : ".dummy">
|
    <STATE_GRAPH : ".state graph">
|
    <MARKING : ".marking">
|
    <END : ".end"> : IGNORE_ALL
|
    <UNSUPPORTED_HEADER : "." <NAME>> : IGNORE_LINE
|
    <NAME : ["A"-"Z", "a"-"z", "_"] (["_", "A"-"Z", "a"-"z", "0"-"9", "."])*>
|
    <DIRECTION : ["+", "-", "~"]>
|
    <INTEGER : (["0"-"9"])+>
|
    "{"
|
    "}"
|
    "<"
|
    ">"
|
    ","
|
    "/"
|
    "="
}

Fst parse() :
{}
{
    {
        init();
    }
    (
        header() <LINEBREAK>
    )*
    graph()
    (
        footer() <LINEBREAK>
    )*
    <END> (<ANY>)* <EOF>
    {
        return fst;
    }
}

void header() :
{
    Token t;
    List<String> list;
}
{
    (<LINEBREAK>)*
    (
        <MODEL_NAME> t = <NAME>
        {
            fst.setTitle(t.image);
        }
    |
        <INPUT_HEADER> list = stringList()
        {
            addSignals(list, Type.INPUT);
        }
    |
        <OUTPUT_HEADER> list = stringList()
        {
            addSignals(list, Type.OUTPUT);
        }
    |
        <INTERNAL_HEADER> list = stringList()
        {
            addSignals(list, Type.INTERNAL);
        }
    |
        <DUMMY_HEADER> list = stringList()
        {
            addSignals(list, Type.DUMMY);
        }
    |
        t = <UNSUPPORTED_HEADER> <REST>
        {
            LogUtils.logWarning("Unsupported keyword '" + t.image + "' in line " + t.beginLine + ". The whole line is ignored.");
        }
    )
}

List<String> stringList() :
{
    Token t;
    List<String> list = new LinkedList<String>();
}
{
    (
        t = <NAME>
        {
            list.add(t.image);
        }
    )*
    {
        return list;
    }
}

void footer() :
{}
{
    <MARKING> marking()
|   <UNSUPPORTED_HEADER> <REST>
}

void marking() :
{
    Token t;
    State state;
}
{
    "{" t = <NAME> "}"
    {
        state = fst.getOrCreateState(t.image);
    }
    {
        state.setInitial(true);
    }
}

void graph() :
{}
{
    <STATE_GRAPH> <LINEBREAK>
    (
        graphLine() <LINEBREAK>
    )*
}

void graphLine() :
{
    Token t;
    State fromState;
    Signal signal;
    Direction direction;
    SignalEvent signalEvent;
    State toState;
}
{
    (
        t = <NAME>
        {
            fromState = fst.getOrCreateState(t.image);
        }
    )
    (
        (
            t = <NAME>
            {
                Type type = signals.get(t.image);
                signal = fst.getOrCreateSignal(t.image, type);
                direction = Direction.TOGGLE;
            }
            (
                t = <DIRECTION>
                {
                    direction = EnumUtils.itemFromString(t.image, Direction.class);
                }
            )?
        )
        (
            t = <NAME>
            {
                toState = fst.getOrCreateState(t.image);
            }
        )
        {
            signalEvent = fst.createSignalEvent(fromState, toState, signal);
            signalEvent.setDirection(direction);
            fromState = toState;
        }
    )+
}
